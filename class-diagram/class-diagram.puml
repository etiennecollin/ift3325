@startuml
'skinparam linetype polyline
'skinparam nodesep 150
'skinparam ranksep 100

class  "<<struct>>\nClient" as Client{
  - async setup_connection(stream: TcpStream, srej: u8,file_path: String,drop_probability: f32, flip_probability: f32) 
  - async send_file(tx: mpsc::Sender<Vec<u8>>, file_path: String) : Result<&'static str, &'static str>
}

class "<<struct>>\nServer" as Server{
  - async handle_client(stream: TcpStream, addr: SocketAddr) : Result<bool, &'static str>
  - async assembler(mut assembler_rx: mpsc::Receiver<Vec<u8>>, write_tx: mpsc::Sender<Vec<u8>>, addr: SocketAddr) : Result<&'static str, &'static str>
}

/'
  class "<<struct>>\nTunnel" as Tunnel {
  - handle_connection(client_stream: TcpStream, server_stream: TcpStream,drop_probability: f32, flip_probability: f32)
  - transmit(data: &[u8]): Result<(), Error>
  - receive(): Result<Vec<u8>, Error>
  - corrupt_frame(frame: Frame) : Result<Frame, Error>
  - drop_frame(frame: Frame) : Result<(), Error>
}
'/

enum FrameType {
  Information : u8
  ConnexionRequest : u8
  ReceiveReady : u8
  Reject : u8
  ConnexionEnd : u8
  P : u8
  Unknown : u8
}

enum FrameError {
  InvalidFrameType : u8
  InvalidFCS : u16
  InvalidLength : u8
  MissingBoundaryFlag : u8
  AbortSequenceReceived : u8
  DestuffingError : u8
  InvalidFrame : u8
}

class "<<struct>>\nFrame" as Frame {
  + frame_type: u8
  + num: u8
  + data: Vec<u8>
  + fcs: Option<u16>
  + content: Option<Vec<u8>>
  + content_stuffed: Option<Vec<u8>>

  + new(frame_type: u8, num: u8, data: Vec<u8>) : Frame
  + generate_content(&self)
  + to_bytes(&self) : Vec<u8>
  + from_bytes(bytes: &[u8]) : Result<Frame, FrameError>
}

annotation "<<sub-module>>\n tests" as TestsFrame {
  - frame_abort_error_test() 
  - frame_length_error_test() 
  - frame_flags_error_test() 
  - frame_type_error_test() 
  - frame_crc_error_test()
  - frame_get_bytes_structure_test()
  - bytes_to_frame_conversion_test()
  - frame_empty_data_test()
}
class "<<struct>>\nWindow" as Window {
  - const NUMBERING_BITS: usize = 3
  - const MAX_FRAME_NUM: u8 = 8
  - const FRAME_TIMEOUT: u64 = 3
  - const SIZE_GO_BACK_N: usize = 7
  - const SIZE_SREJ: usize = 4
  + frames: VecDeque<Frame>
  + resend_all: bool
  + is_connected: bool
  + srej: bool
  + sent_disconnect_request: bool
  + condition: SafeCond

  + new() : Self
  + get_max_size(&self) usize
  + push(&mut self, frame: Frame) Result<(), WindowError>
  + pop_front(&mut self) Option<Frame>
  + is_full(&self) bool
  + contains(&self, num: u8) bool
  + is_empty(&self) bool
  + pop_until(&mut self, num: u8, inclusive: bool) usize
  + clear()
  + default() Self
}

annotation "<<sub-module>>\n tests" as TestsWindow {
  - test_push_and_pop() 
  - test_window_full()
  - test_contains()
  - test_pop_until()
}

enum WindowError {
  Full : u8
}

annotation "<<module>>\nCRC" as CRC {
    + lookup_table() : [u16; 256]
    + crc_16_ccitt(data: &[u8]) : u16
}

annotation "<<sub-module>>\n tests" as TestsCRC {
    - crc_16_ccitt_string_test() 
    - crc_16_ccitt_array_test() 
}

annotation "<<module>>\nIO" as IO {
    + connection_request(window: &SafeWindow, connection_start: bool, srej: Option<u8>, tx: mpsc::Sender<Vec<u8>>, condition: &SafeCond)
    + reader(stream: OwnedReadHalf, window: SafeWindow, writer_tx: Option<mpsc::Sender<Vec<u8>>>, assembler_tx: Option<mpsc::Sender<Vec<u8>>>) : JoinHandle<Result<&'static str, &'static str>>
    + writer(stream: OwnedWriteHalf, rx: mpsc::Receiver<Vec<u8>>) : JoinHandle<Result<&'static str, &'static str>>
    + handle_reception(frame: Frame, safe_window: &SafeWindow, writer_tx: Option<&mpsc::Sender<Vec<u8>>, assembler_tx: Option<&mpsc::Sender<Vec<u8>>, expected_info_num: &mut u8): bool
    + create_frame_timer(safe_window: SafeWindow, num: u8, tx: mpsc::Sender<Vec<u8>>)
}

annotation "<<sub-module>>\n tests" as TestsIO {
    - test_writer() 
    - test_reader()
}

annotation "<<module>>\nByteStuffing" as ByteStuffing {
    + byte_stuffing(frame_bytes: &[u8]) : Vec<u8>
    + byte_destuffing(frame_bytes: &[u8]) : Result<Vec<u8>, FrameError>
}

annotation "<<sub-module>>\n tests" as TestsByteStuffing {
    - bit_stuffing_escape_test() 
    - bit_stuffing_abort_test() 
    - bit_stuffing_simple_test() 
    - byte_stuffing_complex_test() 
    - byte_stuffing_empty_test() 
}

annotation "<<module>>\n FrameHandler" as FrameHandler {
    + handle_receive_ready(safe_window: &SafeWindow, frame: &Frame): bool
    + handle_connection_start(safe_window: SafeWindow, writer_tx:&UnboundedSender<Vec<u8>): bool
    + handle_connection_end(safe_window: SafeWindow, writer_tx: &UnboundedSender<Vec<u8>>): bool
    + handle_reject(safe_window: SafeWindow, writer_tx: &UnboundedSender<Vec<u8>>): bool
    + handle_information(safe_window: SafeWindow, frame: Frame, writer_tx:&UnboundedSender<Vec<u8>>, assembler_tx:&UnboundedSender<Vec<u8>>, expected_info_num: &mut u8): bool
    - handle_dropped_frame(frame: &Frame, safe_window:&SafeWindow,writer_tx:&UnboundedSender<Vec<u8>>, expected_info_num: &u8)
    + handle_p(safe_window: SafeWindow, writer_tx: &UnboundedSender<Vec<u8>>): bool
}

annotation "<<sub-module>>\n tests" as TestsFrameHandler {
    - test_handle_connection_end() 
    - test_handle_receive_ready() 
    - test_handle_reject() 
    - test_frame_drop() 
}

annotation "<<module>>\n Misc" as Misc {
    + async flatten<T>(handle: JoinHandle<Result<T, &'static str>>) : Result<T,&'static str>
}

annotation "<<sub-module>>\n tests" as TestsMisc {
    - test_flatten_ok() 
    - test_flatten_error() 
    - test_flatten_panicked() 
}

'Client --> Tunnel : "reçoit les \nframes du client"
'Tunnel --> Client : "envoie les \nframes du serveur"
'Server --> Tunnel : "reçoit les \nframes du serveur" 
'Tunnel --> Server : "envoie les \nframes du client "

Client --> Server : "envoie les \nframes du client" 
Server --> Client : "envoie les \nframes du serveur" 

Frame --> FrameType : utilise
Frame --> FrameError : utilise

Client --> Frame : utilise
Server --> Frame : utilise
Client --> Window : utilise
Server --> Window : utilise

Window --> WindowError : utilise

Frame --> CRC : utilise
Frame --> ByteStuffing : utilise


'Tunnel --> Frame : "corromps\net ou \ndétruit\nou ne fait rien"
'Tunnel -l> Frame : "corromps et ou détruit ou ne fait rien"



'Tunnel --> IO : utilise 
Client --> IO : utilise 
Server --> IO : utilise

IO --> FrameHandler : utilise

Client --> Misc : utilise 
Server --> Misc : utilise
'Tunnel --> Misc : utilise

FrameHandler --> TestsFrameHandler : contient 
Frame --> TestsFrame : contient 
Window --> TestsWindow : contient 
CRC --> TestsCRC : contient
ByteStuffing --> TestsByteStuffing : contient
Misc --> TestsMisc : contient 
IO --> TestsIO : contient 

/'
Utils --|> ByteStuffing : contient
Utils --|> CRC : contient
Utils --|> IO : contient
Utils --|> Frame : contient
Utils --|> Window : contient
'/

@enduml


